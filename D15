---Ex1
with cte1 AS
(SELECT extract(year from transaction_date) as year,
product_id,
spend as curr_year_spend,
lag(spend) over (partition by product_id
order by product_id, extract(year from transaction_date)) as prev_year_spend
FROM user_transactions)
select year, product_id, curr_year_spend, prev_year_spend,
round((curr_year_spend-prev_year_spend)/prev_year_spend*100.00,2) as yoy_rate 
from cte1 
----Ex2
with cte1 as
(select card_name, issued_amount,
concat(issue_year,'-',issue_month) as card_date,
min(concat(issue_year,'-',issue_month)) over(partition by(card_name)) as launch_date
from monthly_cards_issued)
select card_name, issued_amount from cte1
where card_date=launch_date
order by issued_amount desc
----Ex3
with cte1 AS
(select user_id, spend, transaction_date,
row_number() over(partition by user_id order by transaction_date) as row_num
from transactions)
select user_id, spend, transaction_date from cte1
where row_num=3
----Ex4
with cte1 as 
(select product_id, user_id, spend, transaction_date,
rank() over(partition by user_id order by transaction_date desc) as rank_transaction
from user_transactions)
select transaction_date,user_id, 
count(product_id) as purchase_count
from cte1
where rank_transaction=1
group by transaction_date,user_id
order by transaction_date
---Ex5
select user_id, tweet_date,
round(avg(tweet_count) over (partition by user_id order by tweet_date
rows between 2 preceding and current row),2) as rolling_avg_3d
from tweets
---Ex6
with cte1 as 
(select merchant_id, 
extract(EPOCH from transaction_timestamp -
lag(transaction_timestamp) over(partition by merchant_id, credit_card_id,amount
order by transaction_timestamp))/60 as minute_difference 
from transactions)
select count(merchant_id) as payment_count
from cte1
where minute_difference<=10
---Ex7
with cte1 as
(select category, product, sum(spend) as total_spend
from product_spend
where extract(year from transaction_date)=2022
group by category, product),
cte2 as 
(select *, rank() over (partition by category order by total_spend desc) 
as rank_spend from cte1)
select category, product, total_spend from cte2
where rank_spend<=2
----Ex8
with cte1 as 
(select artists.artist_name,
dense_rank() over(order by count(songs.song_id) desc) as rank_artist
from artists
join songs
on artists.artist_id=songs.artist_id
join global_song_rank as ranking
on songs.song_id=ranking.song_id
where ranking.rank<=10
group by artists.artist_name)
select artist_name, rank_artist
from cte1
where rank_artist<=5
